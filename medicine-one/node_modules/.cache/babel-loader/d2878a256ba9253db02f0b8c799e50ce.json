{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-0eca37cb\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"value\"\n};\nconst _hoisted_2 = {\n  class: \"link\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Search = _resolveComponent(\"Search\");\n\n  const _component_el_icon = _resolveComponent(\"el-icon\");\n\n  const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\");\n\n  return _openBlock(), _createBlock(_component_el_autocomplete, {\n    modelValue: _ctx.state,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.state = $event),\n    \"fetch-suggestions\": _ctx.querySearch,\n    \"popper-class\": \"my-autocomplete\",\n    placeholder: \"Search Medicine\",\n    onSelect: _ctx.handleSelect\n  }, {\n    suffix: _withCtx(() => [_createVNode(_component_el_icon, {\n      class: \"el-input__icon\",\n      onClick: _ctx.handleIconClick\n    }, {\n      default: _withCtx(() => [_createVNode(_component_Search)]),\n      _: 1\n      /* STABLE */\n\n    }, 8\n    /* PROPS */\n    , [\"onClick\"])]),\n    default: _withCtx(({\n      item\n    }) => [_createElementVNode(\"div\", _hoisted_1, _toDisplayString(item.value), 1\n    /* TEXT */\n    ), _createElementVNode(\"span\", _hoisted_2, _toDisplayString(item.link), 1\n    /* TEXT */\n    )]),\n    _: 1\n    /* STABLE */\n\n  }, 8\n  /* PROPS */\n  , [\"modelValue\", \"fetch-suggestions\", \"onSelect\"]);\n}","map":{"version":3,"mappings":";;;;;EAuBWA,KAAK,EAAC;;;EACLA,KAAK,EAAC;;;;;;;;;uBAdhBC,aAgBkBC,0BAhBlB,EAgBkB;gBAfPC,UAeO;+DAfPA,aAAKC,OAeE;IAdf,qBAAmBD,gBAcJ;IAbhB,gBAAa,iBAaG;IAZhBE,WAAW,EAAC,iBAYI;IAXfC,QAAM,EAAEH;EAWO,CAhBlB;IAOaI,MAAM,WACf,MAEU,CAFVC,aAEUC,kBAFV,EAEU;MAFDT,KAAK,EAAC,gBAEL;MAFuBU,OAAK,EAAEP;IAE9B,CAFV;wBACE,MAAU,CAAVK,aAAUG,iBAAV,CAAU;;;;KADZ;;IAAA,cAEU,CAHK;IAKNC,OAAO,WAChB,CAAyC;MADrBC;IACqB,CAAzC,KADwB,CACxBC,oBAAyC,KAAzC,cAAyCC,iBAAnBF,IAAI,CAACG,KAAc,CAAzC,EAAgC;IAAA;IAAhC,CADwB,EAExBF,oBAAyC,MAAzC,cAAyCC,iBAAnBF,IAAI,CAACI,IAAc,CAAzC,EAA+B;IAAA;IAA/B,CAFwB,CAAR;;;;GAZpB;;EAAA","names":["class","_createBlock","_component_el_autocomplete","_ctx","$event","placeholder","onSelect","suffix","_createVNode","_component_el_icon","onClick","_component_Search","default","item","_createElementVNode","_toDisplayString","value","link"],"sourceRoot":"","sources":["/Users/yuchencao/C/CICD Learning/medicineOne/src/main/resources/medioneVUE/medicine-one/src/components/SearchBar.vue"],"sourcesContent":["/**\n/*\n* \n* @description: This component contains seach bar function\n*               function about blury search and accurate search for search medicine\n* @author: Yuchen Cao\n* @update: Yuchen Cao (2022-11-4 11:16)\n*\n*/\n<template>\n  <el-autocomplete\n    v-model=\"state\"\n    :fetch-suggestions=\"querySearch\"\n    popper-class=\"my-autocomplete\"\n    placeholder=\"Search Medicine\"\n    @select=\"handleSelect\"\n  >\n    <template #suffix>\n      <el-icon class=\"el-input__icon\" @click=\"handleIconClick\">\n        <Search />\n      </el-icon>\n    </template>\n    <template #default=\"{ item }\">\n      <div class=\"value\">{{ item.value }}</div>\n      <span class=\"link\">{{ item.link }}</span>\n    </template> \n  </el-autocomplete>\n</template>\n\n<script>\n/* Analyzed bindings: {\n  \"onMounted\": \"setup-const\",\n  \"ref\": \"setup-const\",\n  \"Edit\": \"setup-maybe-ref\",\n  \"state\": \"setup-ref\",\n  \"links\": \"setup-ref\",\n  \"querySearch\": \"setup-const\",\n  \"createFilter\": \"setup-const\",\n  \"loadAll\": \"setup-const\",\n  \"handleSelect\": \"setup-const\",\n  \"handleIconClick\": \"setup-const\"\n} */\nimport { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref,\n        createVNode as _createVNode,\n        resolveComponent as _resolveComponent,\n        withCtx as _withCtx,\n        toDisplayString as _toDisplayString,\n        createElementVNode as _createElementVNode,\n        openBlock as _openBlock,\n        createBlock as _createBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"value\" }\nconst _hoisted_2 = { class: \"link\" }\n\nimport { onMounted, ref } from 'vue'\nimport { Search } from '@element-plus/icons-vue'\nimport store from '../store/index'\nimport api from '../api/index'\n\nconst __sfc__ = /*#__PURE__*/_defineComponent({\n  __name: 'Sidebar',\n\n  setup(__props, __context) {\n    const state = ref('')\n    const links = ref([])\n\n    const querySearch = (queryString, cb) => {\n      const results = queryString\n        ? links.value.filter(createFilter(queryString))\n        : links.value\n      // call callback function to return suggestion objects\n      cb(results)\n    }\n\n    const createFilter = (queryString) => {\n      return (restaurant) => {\n        return (\n          restaurant.value.toLowerCase().indexOf(queryString.toLowerCase()) === 0\n        )\n      }\n    }\n\n    const loadAll = () => {\n      console.log(\"Get Data for auto complete\")\n      // console.log(store.getters.getAutoCompleteData)\n      return store.getters.getAutoCompleteData\n      // return [\n      //   { value: 'aa drug1', link: \"home\" },\n      //   { value: 'bb drug1', link: \"office\" },\n      //   { value: 'cc drug1', link: \"parents\" },\n      //   { value: 'dd drug1', link: \"home\" },\n      //   { value: 'ee drug1', link: \"office\" },\n      //   { value: 'ff drug1', link: \"no location\" },\n      //   { value: 'gg drug1', link: \"nonono location\" },\n      // ]\n    }\n\n    \n    const handleSelect = (item) => {\n      console.log(\"Accurate Search\")\n      console.log(item)\n      var location = item.link;\n      if(location === ''){\n        location = null\n      }\n\n      var locId = null;\n\n      // get location id\n      var locationmap = store.getters.getLocationMap;\n      console.log(locationmap.length)\n      for(var i=0 ; i < locationmap.length; i++){\n        console.log(locationmap[i].address)\n        if(locationmap[i].address === location){\n          console.log('loc match ' + locationmap[i].locationid)\n          locId = locationmap[i].locationid\n          break;\n        }\n      }\n\n      var id = null;\n      var mediList = store.getters.getUserData\n      for(var i=0 ; i < store.getters.getNumMedi ; i++){\n        if(mediList[i].brandname == item.value\n          && mediList[i].locationid == locId){\n            console.log('medicine match')\n            id = mediList[i].id;\n            break;\n          }\n      }\n\n      if(id != null){\n        //__context.emit(\"refresh\")\n        var mode = {\n          view : 'medi_info',\n          mediId : id\n        }\n        __context.emit(\"switch-event\", mode)\n      }\n      else{\n        console.log(\"user data corrucped\")\n      }\n\n      state.value = \"\"\n    }\n\n\n    const handleIconClick = (ev) => {\n      console.log(state.value)\n      console.log(\"Blurry Search Request\")\n      api.blurrySearch(state.value).then(res => {\n        console.log(\"Blurry Request Success\")\n        console.log(res.data)\n        //__context.emit(\"refresh\")\n        var mode = {\n          view : 'search_result',\n          results : res.data.data\n        }\n        __context.emit(\"switch-event\", mode)\n      })\n      state.value = \"\"\n    }\n\n\n    onMounted(() => {\n      links.value = loadAll()\n    })\n\n\n    return (_ctx,_cache) => {\n      const _component_el_icon = _resolveComponent(\"el-icon\")\n      const _component_el_autocomplete = _resolveComponent(\"el-autocomplete\")\n\n      return (_openBlock(), _createBlock(_component_el_autocomplete, {\n        modelValue: state.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event) => ((state).value = $event)),\n        \"fetch-suggestions\": querySearch,\n        \"popper-class\": \"my-autocomplete\",\n        placeholder: \"Search For Medicine\",\n        onSelect: handleSelect\n      }, \n      {\n        suffix: _withCtx(() => [\n            _createVNode(_component_el_icon, {\n              class: \"el-input__icon\",\n              onClick: handleIconClick\n            }, {\n              default: _withCtx(() => [\n                _createVNode(_unref(Search))\n            ]),\n            _: 1 /* STABLE */\n            })\n          ]),\n\n        default: _withCtx(({ item }) => [\n          _createElementVNode(\"div\", _hoisted_1, _toDisplayString(item.value), 1 /* TEXT */),\n          _createElementVNode(\"span\", _hoisted_2, _toDisplayString(item.link), 1 /* TEXT */)\n        ]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"modelValue\"]))\n    }\n}\n\n})\n__sfc__.__file = \"SideBar.vue\"\nexport default __sfc__\n</script>\n<style scoped>\n  *{\n    font-family: \"Gill Sans\", sans-serif;\n  }\n</style>\n\n\n<style>\n  .my-autocomplete li {\n    line-height: normal;\n    padding: 1em;\n    font-size: 1.2em;\n  }\n\n  .my-autocomplete li :hover{\n    margin-left: 15px;\n  }\n\n  .my-autocomplete li .name {\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n  .my-autocomplete li .addr {\n    font-size: 12px;\n    color: #b4b4b4;\n  }\n  .my-autocomplete li .highlighted .addr {\n    color: #ddd;\n  }\n\n  .value{\n    font-size: 1.15em;\n    font-weight: 500;\n    color: #6E78F7;\n  }\n  \n  .link{\n    font-size: 0.8em;\n    color: #752bb5;\n  }\n\n  .el-autocomplete-suggestion{\n    display: felx;\n  }\n\n  @media  screen and (max-width: 992px) {\n    .el-autocomplete.el-tooltip__trigger.el-tooltip__trigger {\n      width: 100%;\n      height: 100%;\n    }\n    .el-input.el-input--suffix {\n      width: 100%;\n      font-size: 1.2em;\n      height: 100%;\n      font-weight: 600;\n    }\n    .el-input__wrapper {\n      align-items: center;\n      height: 100%;\n      border-radius: 2em;\n      box-shadow: 2px 2px 2px #b8cbdd;\n    }\n    .el-input__wrapper:hover {\n      background-color:#eaeaea ;\n    }\n    span.el-input__suffix-inner {\n      margin-right: 1em;\n      color: #6E78F7;\n    }\n    span.el-input__suffix-inner :hover {\n      color: #545bc3;\n    }\n  }\n \n  \n  @media screen and (min-width: 992px) {\n    .el-autocomplete.el-tooltip__trigger.el-tooltip__trigger {\n      width: 100%;\n      height: 100%;\n    }\n    .el-input.el-input--suffix {\n      width: 100%;\n      font-size: 1.5em;\n      height: 100%;\n      font-weight: 600;\n      padding-right: 1em;\n      padding-left: 1em;\n    }\n    .el-input__wrapper {\n      border-radius: 2em;\n      box-shadow: 3px 3px 3px #b8cbdd;\n    }\n    .el-input__wrapper:hover {\n      background-color:#eaeaea ;\n      box-shadow: 10px 10px 10px #b8cbdd;\n    }\n    span.el-input__suffix-inner {\n      margin-right: 1em;\n      color: #6E78F7;\n    }\n    span.el-input__suffix-inner :hover {\n      color: #545bc3;\n    }\n    \n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}